{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/lib/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\nlet pool;\r\n\r\nif (!global._pool) {\r\n  global._pool = mysql.createPool({\r\n    host: process.env.DB_HOST,\r\n    user: process.env.DB_USER,\r\n    password: process.env.DB_PASSWORD,\r\n    database: process.env.DB_NAME,\r\n    waitForConnections: true,\r\n    connectionLimit: 100,\r\n    queueLimit: 0,\r\n  });\r\n}\r\n\r\npool = global._pool;\r\n\r\nexport { pool };"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI;AAEJ,IAAI,CAAC,OAAO,KAAK,EAAE;IACjB,OAAO,KAAK,GAAG,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QAC9B,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;AACF;AAEA,OAAO,OAAO,KAAK"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/lib/dbUtils.js"],"sourcesContent":["import { pool } from \"./db\";\r\n\r\nexport async function queryDB(query, params = []) {\r\n  let connection;\r\n  try {\r\n    connection = await pool.getConnection();\r\n    const [results] = await connection.execute(query, params);\r\n    const [rows] = await connection.query(\r\n      'SHOW STATUS WHERE `variable_name` = \"Threads_connected\"'\r\n    );\r\n    console.log(\"Conexiones activas:\", rows[0]);\r\n    return results;\r\n  } catch (error) {\r\n    console.error(\"Database error:\", error);\r\n    throw error;\r\n  } finally {\r\n    if (connection) connection.release();\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,QAAQ,KAAK,EAAE,SAAS,EAAE;IAC9C,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,kHAAA,CAAA,OAAI,CAAC,aAAa;QACrC,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,OAAO;QAClD,MAAM,CAAC,KAAK,GAAG,MAAM,WAAW,KAAK,CACnC;QAEF,QAAQ,GAAG,CAAC,uBAAuB,IAAI,CAAC,EAAE;QAC1C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM;IACR,SAAU;QACR,IAAI,YAAY,WAAW,OAAO;IACpC;AACF"}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/app/api/auth/register/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport bcrypt from \"bcrypt\";\r\nimport { queryDB } from \"@/lib/dbUtils\";\r\n\r\n// Función para generar un código único\r\nfunction generateCode(length = 10) {\r\n  return Math.random().toString(36).substr(2, length).toUpperCase();\r\n}\r\n\r\n// Validar campos requeridos\r\nfunction validateFields(body) {\r\n  const requiredFields = [\"userName\", \"email\", \"password\"];\r\n  const missing = requiredFields.filter((field) => !body[field]);\r\n\r\n  if (missing.length > 0) {\r\n    return `Faltan los siguientes campos: ${missing.join(\", \")}`;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// Crear sucursal\r\nasync function createSucursal({\r\n  user_admin_id,\r\n  userName,\r\n  description,\r\n  user_id,\r\n}) {\r\n  const result = await queryDB(\r\n    \"INSERT INTO sucursales (user_admin_id, title, description, user_id) VALUES (?, ?, ?, ?)\",\r\n    [user_admin_id, userName, description, user_id]\r\n  );\r\n  return result.insertId;\r\n}\r\n\r\n// Verificar unicidad de código\r\nasync function generateUniqueCollaboratorCode() {\r\n  let code,\r\n    isUnique = false;\r\n  while (!isUnique) {\r\n    code = generateCode();\r\n    const check = await queryDB(\r\n      \"SELECT user_id FROM users WHERE codeCollaborator = ?\",\r\n      [code]\r\n    );\r\n    isUnique = check.length === 0;\r\n  }\r\n  return code;\r\n}\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const body = await req.json();\r\n    console.log(\"data:\", body);\r\n    const {\r\n      userName,\r\n      email,\r\n      password,\r\n      role,\r\n      codeCollaborator,\r\n      description = null,\r\n      user_admin_id,\r\n    } = body;\r\n\r\n    // Validación clara de campos\r\n    const fieldError = validateFields(body);\r\n    if (fieldError) {\r\n      return NextResponse.json({ error: fieldError }, { status: 400 });\r\n    }\r\n\r\n    let finalRole = role || \"Admin\";\r\n\r\n    // Verificar que el email no esté ya registrado\r\n    const existingUser = await queryDB(\r\n      \"SELECT user_id FROM users WHERE email = ?\",\r\n      [email]\r\n    );\r\n    if (existingUser.length > 0) {\r\n      return NextResponse.json(\r\n        { error: \"El correo ya está registrado\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const generatedCode = await generateUniqueCollaboratorCode();\r\n\r\n    const insertResult = await queryDB(\r\n      \"INSERT INTO users (userName, email, password, role, codeCollaborator) VALUES (?, ?, ?, ?, ?)\",\r\n      [userName, email, hashedPassword, finalRole, generatedCode]\r\n    );\r\n\r\n    const newUserId = insertResult.insertId;\r\n    let parentUserId = null;\r\n    let belongToSucursalId = null;\r\n\r\n    if (codeCollaborator) {\r\n      const parentUser = await queryDB(\r\n        \"SELECT user_id, role FROM users WHERE codeCollaborator = ?\",\r\n        [codeCollaborator]\r\n      );\r\n\r\n      console.log(\"parentUser\", parentUser)\r\n\r\n      if (parentUser.length === 0) {\r\n        return NextResponse.json(\r\n          { error: \"El código del colaborador no es válido.\" },\r\n          { status: 400 }\r\n        );\r\n      }\r\n\r\n      parentUserId = parentUser[0].user_id;\r\n\r\n      if (finalRole === \"Sucursal\") {\r\n        belongToSucursalId = await createSucursal({\r\n          user_admin_id,\r\n          userName,\r\n          description,\r\n          user_id: newUserId,\r\n        });\r\n\r\n        const parentRole = parentUser[0].role;\r\n\r\n        if (parentRole === \"Admin\") {\r\n          await queryDB(\r\n            \"INSERT INTO relaciones (user_child_id, user_parent_id) VALUES (?, ?)\",\r\n            [newUserId, parentUserId]\r\n          );\r\n        } else {\r\n          return NextResponse.json(\r\n            {\r\n              error:\r\n                \"El código del colaborador no es válido para este tipo de usuario.\",\r\n            },\r\n            { status: 400 }\r\n          );\r\n        }\r\n      }\r\n\r\n      if (finalRole === \"Vendedor\") {\r\n        const parentRole = parentUser[0].role;\r\n        if (parentRole !== \"Sucursal\" && parentRole !== \"Admin\") {\r\n          return NextResponse.json(\r\n            {\r\n              error:\r\n                \"El código del colaborador no es válido para este tipo de usuario.\",\r\n            },\r\n            { status: 400 }\r\n          );\r\n        }\r\n\r\n        if (parentRole === \"Sucursal\") {\r\n          belongToSucursalId = await queryDB(\r\n            \"SELECT sucursal_id FROM sucursales WHERE user_id = ?;\",\r\n            [parentUserId]\r\n          );\r\n          console.log(\"belongToSucursalId:\", belongToSucursalId);\r\n          belongToSucursalId = belongToSucursalId[0].sucursal_id;\r\n\r\n        }\r\n\r\n        const dataInserted = await queryDB(\r\n          \"INSERT INTO relaciones (user_child_id, user_parent_id, sucursal_id) VALUES (?, ?, ?);\",\r\n          [newUserId, parentUserId, belongToSucursalId]\r\n        );\r\n        if (dataInserted.affectedRows === 0) {\r\n          return NextResponse.json(\r\n            { error: \"Error al insertar la relación\" },\r\n            { status: 500 }\r\n          );\r\n        } else {\r\n          console.log(\"respuesta de la inserción: en tabla relaciones:\", dataInserted);\r\n        }\r\n      \r\n      } else if (finalRole === \"Cliente\") {\r\n        if (parentUser[0].role === \"Admin\") {\r\n          return NextResponse.json(\r\n            {\r\n              error:\r\n                \"El código del colaborador no es válido para este tipo de usuario.\",\r\n            },\r\n            { status: 400 }\r\n          );\r\n\r\n        } else if (parentUser[0].role === \"Sucursal\") {\r\n          belongToSucursalId = await queryDB(\r\n            \"SELECT sucursal_id FROM sucursales WHERE user_id = ?\",\r\n            [parentUserId]\r\n          );\r\n          if (belongToSucursalId.length === 0) {\r\n            return NextResponse.json(\r\n              { error: \"Sucursal no encontrada\" },\r\n              { status: 400 }\r\n            );\r\n          }\r\n          belongToSucursalId = belongToSucursalId[0].sucursal_id;\r\n        } else if (parentUser[0].role === \"Vendedor\") {\r\n          const parentSucursal = await queryDB(\r\n            \"SELECT sucursal_id FROM relaciones WHERE user_child_id = ?\",\r\n            [parentUserId]\r\n          );\r\n          belongToSucursalId = parentSucursal[0].sucursal_id;\r\n        }\r\n        await queryDB(\r\n          \"INSERT INTO relaciones (user_child_id, user_parent_id, sucursal_id) VALUES (?, ?, ?)\",\r\n          [newUserId, parentUserId, belongToSucursalId]\r\n        );\r\n      }\r\n\r\n      return NextResponse.json(\r\n        {\r\n          message: \"Usuario registrado con éxito\",\r\n          userId: newUserId,\r\n          codeCollaborator: generatedCode,\r\n          details: {\r\n            parentUser: parentUserId,\r\n            parentUserCode: codeCollaborator || null,\r\n            state: \"pending\",\r\n            role: finalRole,\r\n          },\r\n        },\r\n        { status: 201 }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error en el registro:\", error);\r\n\r\n    if (error.code === \"ER_DUP_ENTRY\") {\r\n      return NextResponse.json(\r\n        { error: \"El correo ya está en uso\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { error: \"Error en el servidor\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 421, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}