{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/lib/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\nlet pool;\r\n\r\nif (!global._pool) {\r\n  global._pool = mysql.createPool({\r\n    host: process.env.DB_HOST,\r\n    user: process.env.DB_USER,\r\n    password: process.env.DB_PASSWORD,\r\n    database: process.env.DB_NAME,\r\n    waitForConnections: true,\r\n    connectionLimit: 10,\r\n    queueLimit: 0,\r\n  });\r\n}\r\n\r\npool = global._pool;\r\n\r\nexport { pool };"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI;AAEJ,IAAI,CAAC,OAAO,KAAK,EAAE;IACjB,OAAO,KAAK,GAAG,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QAC9B,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;AACF;AAEA,OAAO,OAAO,KAAK"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/lib/dbUtils.js"],"sourcesContent":["import {pool} from \"./db\";\r\n\r\nexport async function queryDB(query, params = []) {\r\n  let connection;\r\n  try {\r\n    connection = await pool.getConnection();\r\n    const [results] = await connection.execute(query, params);\r\n    console.log(\"results\", results)\r\n    return results;\r\n  } catch (error) {\r\n    console.error(\"Database error:\", error);\r\n    throw error;\r\n  } finally {\r\n    if (connection) connection.release();\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,QAAQ,KAAK,EAAE,SAAS,EAAE;IAC9C,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,kHAAA,CAAA,OAAI,CAAC,aAAa;QACrC,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,OAAO;QAClD,QAAQ,GAAG,CAAC,WAAW;QACvB,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM;IACR,SAAU;QACR,IAAI,YAAY,WAAW,OAAO;IACpC;AACF"}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/app/api/auth/register/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport bcrypt from \"bcrypt\";\r\nimport { queryDB } from \"@/lib/dbUtils\";\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const { userName, email, password } = await req.json();\r\n\r\n    // Validar datos\r\n    if (!userName || !email || !password) {\r\n        return NextResponse.json({ error: \"Todos los campos son obligatorios\" }, { status: 400 });\r\n    }\r\n\r\n    // Verificar si el email ya existe en la base de datos\r\n    const existingUser = await queryDB(\"SELECT * FROM users WHERE email = ?\", [email]);\r\n\r\n    if (existingUser.length > 0) {\r\n      return NextResponse.json({ error: \"El correo ya estÃ¡ registrado\" }, { status: 400 });\r\n    }\r\n\r\n    // Hashear la contraseÃ±a\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Guardar usuario en MySQL\r\n    const result = await queryDB(\r\n      \"INSERT INTO users (userName, email, password) VALUES (?, ?, ?)\",\r\n      [userName, email, hashedPassword]\r\n    );\r\n\r\n    return NextResponse.json({ message: \"Usuario registrado con Ã©xito\", userId: result.insertId }, {status: 201});\r\n  } catch (error) {\r\n\r\n    console.error(\"Error en el registro:\", error);\r\n\r\n    if (error.code === \"ER_DUP_ENTRY\") {\r\n      return NextResponse.json(\r\n        { error: \"El correo ya estÃ¡ en uso\" },\r\n        { status: 400 } // ðŸš€ Controlando el error correctamente\r\n      );\r\n    }\r\n    return NextResponse.json({ error: \"Error en el servidor\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEpD,gBAAgB;QAChB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU;YAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoC,GAAG;gBAAE,QAAQ;YAAI;QAC3F;QAEA,sDAAsD;QACtD,MAAM,eAAe,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAO,AAAD,EAAE,uCAAuC;YAAC;SAAM;QAEjF,IAAI,aAAa,MAAM,GAAG,GAAG;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA+B,GAAG;gBAAE,QAAQ;YAAI;QACpF;QAEA,wBAAwB;QACxB,MAAM,iBAAiB,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,2BAA2B;QAC3B,MAAM,SAAS,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAO,AAAD,EACzB,kEACA;YAAC;YAAU;YAAO;SAAe;QAGnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAgC,QAAQ,OAAO,QAAQ;QAAC,GAAG;YAAC,QAAQ;QAAG;IAC7G,EAAE,OAAO,OAAO;QAEd,QAAQ,KAAK,CAAC,yBAAyB;QAEvC,IAAI,MAAM,IAAI,KAAK,gBAAgB;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI,EAAE,wCAAwC;;QAE5D;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}