{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/lib/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\nlet pool;\r\n\r\nif (!global._pool) {\r\n  global._pool = mysql.createPool({\r\n    host: process.env.DB_HOST,\r\n    user: process.env.DB_USER,\r\n    password: process.env.DB_PASSWORD,\r\n    database: process.env.DB_NAME,\r\n    waitForConnections: true,\r\n    connectionLimit: 10,\r\n    queueLimit: 0,\r\n  });\r\n}\r\n\r\npool = global._pool;\r\n\r\nexport { pool };"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI;AAEJ,IAAI,CAAC,OAAO,KAAK,EAAE;IACjB,OAAO,KAAK,GAAG,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QAC9B,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;AACF;AAEA,OAAO,OAAO,KAAK"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/lib/dbUtils.js"],"sourcesContent":["import {pool} from \"./db\";\r\n\r\nexport async function queryDB(query, params = []) {\r\n  let connection;\r\n  try {\r\n    connection = await pool.getConnection();\r\n    const [results] = await connection.execute(query, params);\r\n    return results;\r\n  } catch (error) {\r\n    console.error(\"Database error:\", error);\r\n    throw error;\r\n  } finally {\r\n    if (connection) connection.release();\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,QAAQ,KAAK,EAAE,SAAS,EAAE;IAC9C,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,kHAAA,CAAA,OAAI,CAAC,aAAa;QACrC,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,OAAO;QAClD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM;IACR,SAAU;QACR,IAAI,YAAY,WAAW,OAAO;IACpC;AACF"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/app/api/auth/register/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport bcrypt from \"bcrypt\";\r\nimport { queryDB } from \"@/lib/dbUtils\";\r\n\r\n// Función para generar código único para el nuevo usuario\r\nfunction generateCode(length = 8) {\r\n  return Math.random().toString(36).substr(2, length).toUpperCase();\r\n}\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    let body = await req.json();\r\n    console.log(\"data:\", body);\r\n    const { userName, email, password, role, codeCollaborator } = body;\r\n\r\n\r\n    if (!userName || !email || !password) {\r\n      return NextResponse.json({ error: \"Todos los campos son obligatorios\" }, { status: 400 });\r\n    }\r\n\r\n    let finalRole = role;\r\n\r\n    if (!codeCollaborator) {\r\n      finalRole = \"Admin\";\r\n    }\r\n\r\n    const existingUser = await queryDB(\"SELECT user_id, userName FROM users WHERE email = ?\", [email]);\r\n\r\n    if (existingUser.length > 0) {\r\n      return NextResponse.json({ error: \"El correo ya está registrado\" }, { status: 400 });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    let generatedCode;\r\n    let isUnique = false;\r\n\r\n    while (!isUnique) {\r\n      generatedCode = generateCode();\r\n      const check = await queryDB(\"SELECT user_id FROM users WHERE codeCollaborator = ?\", [generatedCode]);\r\n      isUnique = check.length === 0;\r\n    }\r\n\r\n    const result = await queryDB(\r\n      \"INSERT INTO users (userName, email, password, role, codeCollaborator) VALUES (?, ?, ?, ?, ?)\",\r\n      [userName, email, hashedPassword, role || null, generatedCode]\r\n    );\r\n    \r\n    const newUserId = result.insertId;\r\n\r\n    console.log(\"codeCollaborator::\", codeCollaborator);\r\n\r\n    if (codeCollaborator) {\r\n      const parentUser = await queryDB(\r\n        \"SELECT user_id FROM users WHERE codeCollaborator = ?\",\r\n        [codeCollaborator]\r\n      );\r\n\r\n      if (parentUser.length === 0) {\r\n        return NextResponse.json(\r\n          { error: \"El código del colaborador no es válido.\" },\r\n          { status: 400 }\r\n        );\r\n      }\r\n\r\n      const parentUserId = parentUser[0].user_id;\r\n\r\n      const newRelation = await queryDB(\r\n        \"INSERT INTO relaciones (user_child_id, user_parent_id) VALUES (?, ?)\",\r\n        [newUserId, parentUserId]\r\n      );\r\n\r\n      console.log(\"newRelation::\", newRelation);\r\n    }\r\n\r\n    return NextResponse.json(\r\n      {\r\n        message: \"Usuario registrado con éxito\",\r\n        userId: newUserId,\r\n        codeCollaborator: generatedCode,\r\n      },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error en el registro:\", error);\r\n\r\n    if (error.code === \"ER_DUP_ENTRY\") {\r\n      return NextResponse.json({ error: \"El correo ya está en uso\" }, { status: 400 });\r\n    }\r\n\r\n    return NextResponse.json({ error: \"Error en el servidor\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,0DAA0D;AAC1D,SAAS,aAAa,SAAS,CAAC;IAC9B,OAAO,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,QAAQ,WAAW;AACjE;AAEO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,IAAI,OAAO,MAAM,IAAI,IAAI;QACzB,QAAQ,GAAG,CAAC,SAAS;QACrB,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,gBAAgB,EAAE,GAAG;QAG9D,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoC,GAAG;gBAAE,QAAQ;YAAI;QACzF;QAEA,IAAI,YAAY;QAEhB,IAAI,CAAC,kBAAkB;YACrB,YAAY;QACd;QAEA,MAAM,eAAe,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAO,AAAD,EAAE,uDAAuD;YAAC;SAAM;QAEjG,IAAI,aAAa,MAAM,GAAG,GAAG;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA+B,GAAG;gBAAE,QAAQ;YAAI;QACpF;QAEA,MAAM,iBAAiB,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,IAAI;QACJ,IAAI,WAAW;QAEf,MAAO,CAAC,SAAU;YAChB,gBAAgB;YAChB,MAAM,QAAQ,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAO,AAAD,EAAE,wDAAwD;gBAAC;aAAc;YACnG,WAAW,MAAM,MAAM,KAAK;QAC9B;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAO,AAAD,EACzB,gGACA;YAAC;YAAU;YAAO;YAAgB,QAAQ;YAAM;SAAc;QAGhE,MAAM,YAAY,OAAO,QAAQ;QAEjC,QAAQ,GAAG,CAAC,sBAAsB;QAElC,IAAI,kBAAkB;YACpB,MAAM,aAAa,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAO,AAAD,EAC7B,wDACA;gBAAC;aAAiB;YAGpB,IAAI,WAAW,MAAM,KAAK,GAAG;gBAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAA0C,GACnD;oBAAE,QAAQ;gBAAI;YAElB;YAEA,MAAM,eAAe,UAAU,CAAC,EAAE,CAAC,OAAO;YAE1C,MAAM,cAAc,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAO,AAAD,EAC9B,wEACA;gBAAC;gBAAW;aAAa;YAG3B,QAAQ,GAAG,CAAC,iBAAiB;QAC/B;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,QAAQ;YACR,kBAAkB;QACpB,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QAEvC,IAAI,MAAM,IAAI,KAAK,gBAAgB;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAChF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF"}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}