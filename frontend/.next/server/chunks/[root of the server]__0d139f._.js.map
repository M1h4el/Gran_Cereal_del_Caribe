{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/lib/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\nlet pool;\r\n\r\nif (!global._pool) {\r\n  global._pool = mysql.createPool({\r\n    host: process.env.DB_HOST,\r\n    user: process.env.DB_USER,\r\n    password: process.env.DB_PASSWORD,\r\n    database: process.env.DB_NAME,\r\n    waitForConnections: true,\r\n    connectionLimit: 20,\r\n    queueLimit: 0,\r\n  });\r\n}\r\n\r\npool = global._pool;\r\n\r\nexport { pool };"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI;AAEJ,IAAI,CAAC,OAAO,KAAK,EAAE;IACjB,OAAO,KAAK,GAAG,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QAC9B,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;AACF;AAEA,OAAO,OAAO,KAAK"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/lib/dbUtils.js"],"sourcesContent":["import { pool } from \"./db\";\r\n\r\nexport async function queryDB(query, params = []) {\r\n  let connection;\r\n  try {\r\n    connection = await pool.getConnection();\r\n    const [results] = await connection.execute(query, params);\r\n    const [rows] = await connection.query(\r\n      'SHOW STATUS WHERE `variable_name` = \"Threads_connected\"'\r\n    );\r\n    console.log(\"Conexiones activas:\", rows[0]);\r\n    return results;\r\n  } catch (error) {\r\n    console.error(\"Database error:\", error);\r\n    throw error;\r\n  } finally {\r\n    if (connection) connection.release();\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,QAAQ,KAAK,EAAE,SAAS,EAAE;IAC9C,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,kHAAA,CAAA,OAAI,CAAC,aAAa;QACrC,MAAM,CAAC,QAAQ,GAAG,MAAM,WAAW,OAAO,CAAC,OAAO;QAClD,MAAM,CAAC,KAAK,GAAG,MAAM,WAAW,KAAK,CACnC;QAEF,QAAQ,GAAG,CAAC,uBAAuB,IAAI,CAAC,EAAE;QAC1C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM;IACR,SAAU;QACR,IAAI,YAAY,WAAW,OAAO;IACpC;AACF"}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/app/api/invoices/%5BinvoiceId%5D/details/route.js"],"sourcesContent":["import { queryDB } from \"@/lib/dbUtils\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\n// ✅ GET: Obtener todos los detalles de una factura\r\nexport async function GET(req, { params }) {\r\n  const { invoiceId } = await params;\r\n\r\n  try {\r\n    if (invoiceId) {\r\n      const details = await queryDB(\r\n        `SELECT p.productCode, p.name, p.price, ind.idinvoice_detail, ind.quantity, ind.unitPrice, ind.total, p.created_at, p.updated_at  FROM invoice_details ind, products p WHERE ind.idinvoice = ? AND ind.productCode = p.productCode;`,\r\n        [invoiceId]\r\n      );\r\n      console.log(\"detailllllls\", details)\r\n      return NextResponse.json(details);\r\n    } else {\r\n      return NextResponse.json(\r\n        { error: \"Invoice Id no especificado\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: \"Error al obtener detalles\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// ✅ PUT: Actualizar un detalle existente\r\nexport async function PUT(req, { params }) {\r\n  const { invoiceId } = await params;\r\n\r\n  console.log(\"InvoiceId\", invoiceId)\r\n\r\n  try {\r\n    const body = await req.json();\r\n    const { data } = body;\r\n\r\n    if (!Array.isArray(data)) {\r\n      return NextResponse.json({ error: \"Formato inválido\" }, { status: 400 });\r\n    }\r\n\r\n    console.log(\"data\", data)\r\n\r\n    const newRows = [];\r\n    const existingRows = [];\r\n\r\n    for (const row of data) {\r\n      const { idinvoice_detail, product, quantity, unitPrice, total } = row;\r\n\r\n      if (!product || !quantity || !unitPrice || !total) {\r\n        console.log(\"Fila incompleta, ignorada:\", row);\r\n        continue;\r\n      }\r\n\r\n      const productCode = product.split(\" - \")[0];\r\n\r\n      if (!idinvoice_detail || idinvoice_detail.toString().startsWith(\"temp-\")) {\r\n        newRows.push([invoiceId, productCode, quantity, unitPrice, total]);\r\n      } else {\r\n        existingRows.push({ idinvoice_detail, productCode, quantity, unitPrice, total });\r\n      }\r\n    }\r\n\r\n    const updated = [];\r\n\r\n    // INSERT individual evitando duplicados\r\n    if (newRows.length > 0) {\r\n      console.log(\"Insertando nuevas filas sin duplicar productCode por invoiceId...\");\r\n\r\n      for (const row of newRows) {\r\n        const [idinvoice, productCode, quantity, unitPrice, total] = row;\r\n\r\n        const result = await queryDB(\r\n          `INSERT INTO invoice_details (idinvoice, productCode, quantity, unitPrice, total)\r\n           SELECT ?, ?, ?, ?, ?\r\n           FROM DUAL\r\n           WHERE NOT EXISTS (\r\n             SELECT 1 FROM invoice_details WHERE idinvoice = ? AND productCode = ?\r\n           )`,\r\n          [idinvoice, productCode, quantity, unitPrice, total, idinvoice, productCode]\r\n        );\r\n\r\n        if (result.affectedRows > 0) {\r\n          updated.push({\r\n            idinvoice_detail: result.insertId,\r\n            idproduct: productCode,\r\n            quantity,\r\n            unitPrice,\r\n            total,\r\n          });\r\n        } else {\r\n          console.log(`Producto duplicado no insertado: ${productCode} para invoice ${idinvoice}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // UPDATE múltiples usando CASE WHEN\r\n    if (existingRows.length > 0) {\r\n      const ids = existingRows.map((r) => r.idinvoice_detail);\r\n\r\n      const updateQuery = `\r\n        UPDATE invoice_details\r\n        SET\r\n          productCode = CASE idinvoice_detail\r\n            ${existingRows.map((r) => `WHEN ${r.idinvoice_detail} THEN ${JSON.stringify(r.productCode)}`).join(\"\\n\")}\r\n          END,\r\n          quantity = CASE idinvoice_detail\r\n            ${existingRows.map((r) => `WHEN ${r.idinvoice_detail} THEN ${r.quantity}`).join(\"\\n\")}\r\n          END,\r\n          unitPrice = CASE idinvoice_detail\r\n            ${existingRows.map((r) => `WHEN ${r.idinvoice_detail} THEN ${r.unitPrice}`).join(\"\\n\")}\r\n          END,\r\n          total = CASE idinvoice_detail\r\n            ${existingRows.map((r) => `WHEN ${r.idinvoice_detail} THEN ${r.total}`).join(\"\\n\")}\r\n          END\r\n        WHERE idinvoice_detail IN (${ids.join(\", \")}) AND idinvoice = ?\r\n      `;\r\n\r\n      const responseUpdate = await queryDB(updateQuery, [invoiceId]);\r\n      console.log(\"Response de actualización:\", responseUpdate);\r\n      updated.push(...existingRows);\r\n    }\r\n\r\n    return NextResponse.json({ updated });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return NextResponse.json({ error: \"Error al actualizar detalles\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\n// ✅ DELETE: Eliminar un detalle\r\n/* export async function DELETE(request, { params }) {\r\n  const { id } = await request.json();\r\n\r\n  try {\r\n    await queryDB(`DELETE FROM invoice_details WHERE id = ?`, [id]);\r\n    return NextResponse.json({ message: \"Detalle eliminado correctamente.\" });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: \"Error al eliminar detalle\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} */\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 359, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}