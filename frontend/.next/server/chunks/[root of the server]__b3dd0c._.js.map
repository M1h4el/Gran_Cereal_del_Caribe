{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/lib/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\r\n\r\nexport const pool = mysql.createPool({\r\n  host: process.env.DB_HOST, \r\n  user: process.env.DB_USER, \r\n  password: process.env.DB_PASSWORD, \r\n  database: process.env.DB_NAME, \r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IACnC,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;IAC7B,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd"}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solan/Desktop/AssessmentProject/frontend/src/app/api/auth/register/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport bcrypt from \"bcrypt\";\r\nimport { pool as db } from \"@/lib/db\"; // Asegúrate de que tu conexión está en /lib/db.js\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const { userName, email, password } = await req.json();\r\n\r\n    // Validar datos\r\n    if (!userName || !email || !password) {\r\n        return NextResponse.json({ error: \"Todos los campos son obligatorios\" }, { status: 400 });\r\n    }\r\n\r\n    // Verificar si el email ya existe en la base de datos\r\n    const [existingUser] = await db.query(\"SELECT * FROM users WHERE email = ?\", [email]);\r\n\r\n    console.log(\"existingUser:\", existingUser)\r\n\r\n    if (existingUser.length > 0) {\r\n      return NextResponse.json({ error: \"El correo ya está registrado\" }, { status: 400 });\r\n    }\r\n\r\n    // Hashear la contraseña\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Guardar usuario en MySQL\r\n    const [result] = await db.query(\r\n      \"INSERT INTO users (userName, email, password) VALUES (?, ?, ?)\",\r\n      [userName, email, hashedPassword]\r\n    );\r\n\r\n    return NextResponse.json({ message: \"Usuario registrado con éxito\", userId: result.insertId }, {status: 201});\r\n  } catch (error) {\r\n    console.error(\"Error en el registro:\", error);\r\n    return NextResponse.json({ error: \"Error en el servidor\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA,mMAAuC,kDAAkD;;;;AAElF,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEpD,gBAAgB;QAChB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU;YAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoC,GAAG;gBAAE,QAAQ;YAAI;QAC3F;QAEA,sDAAsD;QACtD,MAAM,CAAC,aAAa,GAAG,MAAM,kHAAA,CAAA,OAAE,CAAC,KAAK,CAAC,uCAAuC;YAAC;SAAM;QAEpF,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,IAAI,aAAa,MAAM,GAAG,GAAG;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA+B,GAAG;gBAAE,QAAQ;YAAI;QACpF;QAEA,wBAAwB;QACxB,MAAM,iBAAiB,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,2BAA2B;QAC3B,MAAM,CAAC,OAAO,GAAG,MAAM,kHAAA,CAAA,OAAE,CAAC,KAAK,CAC7B,kEACA;YAAC;YAAU;YAAO;SAAe;QAGnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAgC,QAAQ,OAAO,QAAQ;QAAC,GAAG;YAAC,QAAQ;QAAG;IAC7G,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF"}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}